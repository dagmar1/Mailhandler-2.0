<?php
// $Id: mailhandler.module,v 1.96.2.3.2.2 2010/03/18 00:49:12 developmentseed Exp $

/**
 * Implementation of hook_cron(). Process msgs from all enabled mailboxes.
 */
function mailhandler_cron() {
  // Include mailhandler retrieval functions
  module_load_include('inc', 'mailhandler', 'mailhandler.retrieve');
  // Retrieve messages
  $result = db_query('SELECT * FROM {mailhandler} WHERE enabled = 1 ORDER BY mail');
  while ($mailbox = db_fetch_array($result)) {
    mailhandler_node_process_mailbox($mailbox, variable_get('mailhandler_max_retrieval', 0), array());
  }
}

/**
 * Implementation of hook_perm().
 */
function mailhandler_perm() {
  return array('administer mailhandler');
}

/**
 * Implementation of hook_menu().
 */
function mailhandler_menu() {
  $items = array();
  $items['admin/content/mailhandler'] = array(
    'title' => t('Mailhandler Mailboxes'),
    'description' => t('Manage mailboxes'),
    'page callback' => 'mailhandler_operations_view',
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/mailhandler/view'] = array(
    'title' => 'List',
    'description' => 'Manage mailboxes',
    'page callback' =>  'mailhandler_operations_view',
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/content/mailhandler/list'] = array(
    'title' => t('List'),
    'description' => t('Manage mailboxes and retrieve messages.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer mailhandler'),
    'weight' => -10,
  );

  $items['admin/content/mailhandler/add'] = array(
    'title' => t('Add mailbox'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailhandler_add_edit_mailbox', NULL),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mailhandler.admin.inc',
  );

  $items['admin/content/mailhandler/clone/%'] = array(
    'title' => t('Add mailbox'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailhandler_add_edit_mailbox', 4, TRUE),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_CALLBACK,
    'file' => 'mailhandler.admin.inc',
  );

  $items['admin/content/mailhandler/retrieve/%mailhandler_mailbox'] = array(
    'title' => t('Retrieve'),
    'page callback' => 'mailhandler_node_process_mailbox',
    // Cast variable as string so menu system does not mistake it for a path argument
    'page arguments' => array(4, 'ui', (string) variable_get('mailhandler_max_retrieval', 0)),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_CALLBACK,
    'file' => 'mailhandler.retrieve.inc',
  );

#  $items['admin/content/mailhandler/edit/%'] = array(
#    'title' => t('Edit mailbox'),
#    'page callback' => 'drupal_get_form',
#    'page arguments' => array('mailhandler_add_edit_mailbox', 4),
#    'access arguments' => array('administer mailhandler'),
#    'type' => MENU_CALLBACK,
#    'file' => 'mailhandler.admin.inc',
#  );

  $items['admin/content/mailhandler/delete/%'] = array(
    'title' => t('Delete mailbox'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailhandler_admin_delete_confirm', 4),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_CALLBACK,
    'file' => 'mailhandler.admin.inc',
  );

  $items['admin/settings/mailhandler'] = array(
    'title' => 'Mailhandler Settings',
    'description' => t('Set the default content type for incoming messages and set the cron limit.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailhandler_admin_settings'),
    'access arguments' => array('administer mailhandler'),
    'file' => 'mailhandler.admin.inc',
  );
  $items['admin/content/mailhandler/%/%mailhandler_mailboxes'] = array(
    'title' => 'Mailhandler',
    'title callback' => 'mailhandler_operations_title',
    'title arguments' => array(3, 4),
    'description' => 'Perform mailhandler operations',
    'page callback' =>  'mailhandler_operations',
    'page arguments' => array(3,4),
    //'load arguments' => array(array('name' => 4), 'names'),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_CALLBACK,
    'file' => 'mailhandler.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_help().
 */
function mailhandler_help($path = 'admin/help#mailhandler', $arg) {
  $output = '';
  $link->add = l(t('Add mailbox'), 'admin/content/mailhandler/add');

  // Gather examples of useful commands, and build a definition list with them:
  $commands[] = array('command' => 'taxonomy: [term1, term2]',
                      'description' => t('Use this to add the terms <em>term1</em> and <em>term2</em> to the node.<br />
                      Both of the terms should already exist. In case they do not exist already, they will be quietly ommitted'));
  $commands[] = array('command' => 'taxonomy[v]: [term1, term2]',
                      'description' => t('Similar to the above: adds the terms <em>term1</em> and <em>term2</em> to the node, but uses the vocabulary with the vocabulary id <em>v</em>. For example <em>taxonomy[3]</em> will chose only terms from the vocabulary which id is 3.<br />
                      In case some of the terms do not exist already, the behavior will depend on whether the vocabulary is a free tagging vocabulary or not. If it is a free tagging vocabulary, the term will be added, otherwise, it will be quietly ommitted'));

  $commands_list = '<dl>';
  foreach ($commands as $command) {
    $commands_list .= '<dt>'. $command['command'] .'</dt>';
    $commands_list .= '<dl>'. $command['description'] .'</dl>';
  }
  $commands_list .= '</dl>';

  switch ($path) {
    case 'admin/help#mailhandler':
      $output = '<p>'. t('The mailhandler module allows registered users to create or edit nodes and comments via e-mail. Users may post taxonomy terms, teasers, and other post attributes using the mail commands capability.  This module is useful because e-mail is the preferred method of communication by community members.') .'</p>';
      $output .= '<p>'. t('The mailhandler module requires the use of a custom mailbox.  Administrators can add mailboxes that should be customized to meet the needs of a mailing list. This mailbox will then be checked on every cron job. Administrators may also initiate a manual retrieval of messages.') .'</p>';
      $output .= '<p>'. t('This is particularly useful when you want multiple sets of default commands. For example , if you want to authenticate based on a non-standard mail header like Sender: which is useful for accepting submissions from a listserv. Authentication is usually based on the From: e-mail address.  Administrators can edit the individual mailboxes when they administer mailhandler.') .'</p>';
      $output .= t('<p>You can</p>
<ul>
<li><a href="@run-cron">run cron</a> to retrieve messages from all cron enabled mailboxes.</li>
<li>list mailboxes at <a href="@admin-mailhandler">Administer &gt;&gt; Content management &gt;&gt; Mailhandler</a>.</li>
<li>add a mailbox at <a href="@admin-mailhandler-add">Administer &gt;&gt; Content management &gt;&gt; Mailhandler &gt;&gt; Add  mailbox.</a></li>
<li>set default commands, (password, type, taxonomy, promote, status), for how to work with incoming mail at <a href="%admin-mailhandler">Administer &gt;&gt; Content management &gt;&gt; Mailhandler</a> and select <strong>edit</strong> for the email address being handled.  Set commands in the default command field.</li>
<li>post email, such as from a mailing list, to a forum by adding the term id (number found in the URL) to the default commands using <strong>tid: #</strong>.</li>
<li>alter mailhandler settings (default content type and cron threshold) at <a href="@admin-mailhandler-settings">Administer &gt;&gt; Site configuration &gt;&gt; Mailhandler</a>.</li>
</ul>',
   array(
     '@run-cron' => url('admin/logs/status/run-cron'),
     '@admin-mailhandler-add' => url('admin/content/mailhandler/add'),
     '@admin-mailhandler' => url('admin/content/mailhandler'),
     '@admin-mailhandler-settings' => url('admin/settings/mailhandler'),
   ));
      $output .= '<h3 id="commands">'. t('Useful Commands') .'</h3>';
      $output .= $commands_list;
      $output .= '<p>'. t('For more information please read the configuration and customization handbook <a href="@mailhandler">Mailhandler page</a>.', array('@mailhandler' => url('http://www.drupal.org/handbook/modules/mailhandler', array('absolute' => TRUE)))) .'</p>'; 
      return $output;
    case 'admin/content/mailhandler':
      return t('The mailhandler module allows registered users to create or edit nodes and comments via email. Authentication is usually based on the From: email address. There is also an email filter that can be used to prettify incoming email. Users may post taxonomy terms, teasers, and other node parameters using the Command capability.');
    case 'admin/content/mailhandler/add':
      return t('Add a mailbox whose mail you wish to import into Drupal. Can be IMAP, POP3, or local folder.');
    case 'admin/content/mailhandler/edit/%':
      return t('Edit the mailbox whose mail you wish to import into Drupal. Can be IMAP, POP3, or local folder.');
    case 'admin/settings/mailhandler':
      return t('The mailhandler module allows registered users to create or edit nodes and comments via e-mail.');
  }
}


/**
 * Implementation of hook_init to add mailhandler.css
 */
function mailhandler_init() {
  drupal_add_css(drupal_get_path('module', 'mailhandler') .'/mailhandler.css');
  return;
}

/**
 * Implementation of hook_mail().
 */
function mailhandler_mail($key, &$message, $params) {
  $variables = array(
    '!body' => $params['body'],
    '!from' => $params['from'],
    '!site_name' => variable_get('site_name', 'Drupal'),
    '!subject' => $params['header']->subject,
    '!type' => $params['node']->type,
  );
  $message['subject'] = t('Email submission to !site_name failed - !subject', $variables);
  $message['body'][] = $params['error_text'];
  foreach ($params['error_messages'] as $key => $error) {
    $message['body'][$key] = decode_entities(strip_tags($error));
  }
  $message['body'][] = t("You sent:\n\nFrom: !from\nSubject: !subject\nBody:\n!body", $variables);
}

/**
 * Implementation of hook_mailhandler_authenticate_info()
 */
function mailhandler_mailhandler_authenticate_info() {
  $info = array(
    'mailhandler_default' => array(
      'title' => 'Mailhandler Default',
      'description' => 'Checks whether the sender matches a valid user in the database',
      'callback' => 'mailhandler_authenticate_default',
      'module' => 'mailhandler',
      'extension' => NULL, // as in $type in module_load_include
      'basename' => NULL, // as in $name in module_load_include
    )
  );
  if (module_exists('tokenauth')) {
    $info += array(
      'mailhandler_tokenauth' => array(
        'title' => 'Mailhandler Tokenauth',
        'description' => 'Authenticate messages based on users token from Tokenauth module',
        'callback' => 'mailhandler_authenticate_tokenauth',
        'module' => 'mailhandler',
        'extension' => NULL,
        'basename' => NULL,
      ),
    );
  }
  return $info;
}

/**
 * Authenticate message based on sender's email address
 *   If the sender's email address matches an email address of a valid user, then assign
 *   that user's uid and name to the node object.
 *   
 * @param $node
 *   Object a node object
 * @param $header
 *   Object of message header information
 * @param $origbody
 *   String message body text
 * @param $mailbox
 *   Array of mailbox configuration
 * 
 * @return object, the node object
 */
function mailhandler_authenticate_default($node, $header, $origbody, $mailbox) {
  list($fromaddress, $fromname) = mailhandler_get_fromaddress($header, $mailbox);
  if ($from_user = mailhandler_user_load($fromaddress, $node->pass, $mailbox)) {
    $node->uid = $from_user->uid;
    $node->name = $from_user->name;
  }
  // Try using mailalias email aliases
  else if (function_exists('mailalias_user') && $from_user = mailhandler_user_load_alias($fromaddress, $node, $mailbox)) {
    $node->uid = $from_user->uid;
    $node->name = $from_user->name;
  }
  else {
    // Authentication failed.  Try as anonymous.
    $node->uid = 0;
    $node->name = $fromname;
  }
  return $node;
}

/**
 * Authenticate message based on token from tokenauth module
 *   If the user's token is found somewhere in the "to" field, assign that user's uid and name 
 *   to the node object.  A rough search for the token somewhere in the "toaddress" is performed
 *   instead of an exact, ordered match in order to allow some freedom in the format of allowed
 *   "toaddress".  For example, if using a catchall email address, the toaddress could be:
 *   
 *   f93ksj35dx@example.com - where f93ksj35dx is the user's token
 *   or alternatively:
 *   f93ksj35dx-foo@example.com - where f93ksj35dx is the user's token and foo is the name of an
 *   Organic Group to which the message should be assigned.  
 *   
 *   A rough search allows for different approaches to use this single authentication method.
 *   
 * @param $node
 *   Object a node object
 * @param $header
 *   Object of message header information
 * @param $origbody
 *   String message body text
 * @param $mailbox
 *   Array of mailbox configuration
 * 
 * @return object, the node object
 */
function mailhandler_authenticate_tokenauth($node, $header, $origbody, $mailbox) {
  if (module_exists('tokenauth')) {
    list($fromaddress, $fromname) = mailhandler_get_fromaddress($header, $mailbox);
    // If user with given email address exists and their token is in the toaddress, allow.
    if (($from_user = mailhandler_user_load($fromaddress, $node->pass, $mailbox))
    && strpos($header->to[0]->mailbox, tokenauth_get_token($from_user->uid)) !== FALSE) {
      $node->uid = $from_user->uid;
      $node->name = $from_user->name;
    }
    // Try using mailalias email aliases
    else if (function_exists('mailalias_user') && ($from_user = mailhandler_user_load_alias($fromaddress, $node, $mailbox))
    && strpos($header->to[0]->mailbox, tokenauth_get_token($from_user->uid)) !== FALSE) {
      $node->uid = $from_user->uid;
      $node->name = $from_user->name;
    }
    else {
      // If token authentication fails, try as anonymous.
      $node->uid = 0;
      $node->name = $fromname;
    }
  }
  return $node;
}

/**
 * Determine from address either using the mailbox setting or via the header information
 * 
 * @param $header
 *   Object message header information
 * @param $mailbox
 *   Array mailbox settings
 * @return array
 */
function mailhandler_get_fromaddress($header, $mailbox) {
  if (($fromheader = strtolower($mailbox['fromheader'])) && isset($header->$fromheader)) {
    $from = $header->$fromheader;
  }
  else {
    $from = $header->from;
  }
  return array($from[0]->mailbox .'@'. $from[0]->host, $from[0]->personal);
}

/**
 * Retrieve user information from his email address.
 */
function mailhandler_user_load($mail, $pass, $mailbox) {
  if ($mailbox['security'] == 1) {
    if (!$account = user_load(array('mail' => $mail, 'pass' => $pass))) {
      watchdog('mailhandler', 'Wrong password used in message commands for %address', array('%address' => $mail), WATCHDOG_NOTICE);
    }
    return $account;
  }
  else {
    return user_load(array('mail' => $mail));
  }
}

/**
 * Look up a user based on their mailalias addresses
 * 
 * Helper function for mailhandler_authenticate_tokenauth()
 * 
 * @param $fromaddress
 *   String from address
 * @param $node
 *   Object node object
 * @param $mailbox
 *   Array of mailhandler mailbox configuration
 *   
 * @return Object user object or FALSE
 */
function mailhandler_user_load_alias($fromaddress, $node, $mailbox) {
  $result = db_query("SELECT mail FROM {users} WHERE data LIKE '%%%s%%'", $fromaddress);
  while ($alias = db_result($result)) {
    if ($from_user = mailhandler_user_load($alias, $node->pass, $mailbox)) {
      return $from_user;
      break;
    }
  }
  return FALSE;
}

/**
* Export mailhandler mapping and display it in a form.
*/
function mailhandler_mailbox_export(&$form_state, $name) {
  $obj = mailhandler_mailboxes_load($name);
  drupal_set_title(check_plain($obj->description));
  $code = mailhandler_mailbox_export_export($obj);
  $lines = substr_count($code, "\n");

  // TODO: title callback is not setting the title.
  drupal_set_title(t('Export mailbox !mailbox', array('!mailbox' => $name)));
  $form['export'] = array(
    '#title' => t('Export data'),
    '#type' => 'textarea',
    '#value' => $code,
    '#rows' => $lines,
    '#description' => t(''),
  );
  return $form;
}

/**
 * Export a mailbox 
 */
function mailhandler_mailbox_export_export($obj, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('mailhandler', $obj, $indent);
  return $output;
}

/**
 * Implementation of hook_ctools_plugin_api()
 */
function mailhandler_ctools_plugin_api($module, $api) {
  if ($module == 'mailhandler' && $api == 'mailhandler_default') {
    return array(
      'version' => 1,
      'file' => 'mailhandler.mailhandler_default.inc',
      'path' => drupal_get_path('module', 'mailhandler'),
    );
  }
  elseif ($module == 'mailhandler' && $api == 'plugins') {
    return array(
      'version' => 1
    );
  }
}

/**
 * Implementation of hook_theme()
 */
function mailhandler_theme() {
  $hooks = array();
  $hooks['mailhandler_operations_view'] = array(
    'arguments' => array(),
  );
  $hooks['mailhandler_view_mapping_formatter'] = array(
    'arguments' => array(),
  );
  return $hooks;
}

function theme_mailhandler_operations_view($maps) {
  // Theme these into a table with EDIT | DELETE | ACTIVATE | EXPORT
  $header = array(t('Name'), t('Status'), t('Operations'));
  $rows = array();
  foreach ($maps as $map) {
    $rows[] = array(
      l($map->name, "admin/settings/mailhandler/edit/$map->name"),
      t($map->type),
      mailhandler_operations_view_options($map),
    );
  }
  return theme('table', $header, $rows);
}

function mailhandler_operations_view_options($mailbox) {
  $ops = array();
  $ops['edit'] = array(
    'name' => t('Edit'),
    'path' => "admin/content/mailhandler/edit/$mailbox->name",
  );
  $ops['delete'] = array(
    'name' => t('Delete'),
    'path' => "admin/content/mailhandler/delete/$mailbox->name"
  );
  $mailbox->name == $active ? $status = t('Disable') : $status = t('Enable');
  $ops['toggle'] = array(
    'name' => $status,
    'path' => "admin/content/mailhandler/toggle/$mailbox->name"
  );
  $ops['export'] = array(
    'name' => t('Export'),
    'path' => "admin/content/mailhandler/export/$mailbox->name"
  );
  $links = array();
  foreach ($ops as $op) {
    $links[] = l($op['name'], $op['path']);
  }
  $links = implode(" | ", $links);
  return $links;
}

// TODO - call this with $type ... 'names'/'all'/NULL
//   $type of NULL will initialize a new mailbox
//   which can be used on the form for making a new mailbox

function mailhandler_mailboxes_load($name = '') {
  $args = array();
  !$name ? $type = 'all' : $type = 'names'; 
  if ($type == 'names') {
    $args = array('name' => $name);
  }
  if (module_exists('ctools')) {
    ctools_include('export');
    $mailboxes = ctools_export_load_object('mailhandler', $type, $args);
    // If just fetching one mapping, queue it up.
    if ($type == 'names' && count($args['name']) == 1) {
      return array_shift($mailboxes);
    }
    else {
      return $mailboxes;
    }
  }
}

function mailhandler_operations_title($op = '', $mailbox = '') {
  //$map = array_shift($map); // TODO: is this always going to be an object, and not an array?
  switch($op) {
    case 'edit':
      return t('Edit mapping !mapping', array('!mailbox' => $mailbox->name));
    default:
      return;
      break;
  }
}

function mailhandler_operations($op = '', $mailbox = '') {
  switch($op) {
    case 'edit':
      return drupal_get_form('mailhandler_add_edit_mailbox', $mailbox->name);
      break;
    case 'delete':
      return drupal_get_form('mailhandler_operations_delete_confirm', $mailbox);
      break;
    case 'toggle':
      return drupal_get_form('mailhandler_operations_toggle_confirm', $mailbox);
      break;
    case 'export':
      return drupal_get_form('mailhandler_mailbox_export', $mailbox->name);
    default:
      return mailhandler_operations_view();
  }
}

function mailhandler_operations_view() {
  return theme('mailhandler_operations_view', mailhandler_mailboxes_load());
}


/**
 * Implementation of hook_mailhandler_plugins().
 */
function mailhandler_mailhandler_plugins() {
  $plugins = array();
  $plugins['MailhandlerMailbox'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'mailhandler') .'/plugins',
      'file' => 'MailhandlerMailbox.inc',
      'class' => 'MailhandlerMailbox',
      # 'parent' => '',
    ),
  );
  return $plugins;
}
