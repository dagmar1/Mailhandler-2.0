<?php
// $Id: mailhandler.module,v 1.96.2.3.2.2 2010/03/18 00:49:12 developmentseed Exp $


/**
 * Implementation of hook_perm().
 */
function mailhandler_perm() {
  return array('administer mailhandler');
}

/**
 * Implementation of hook_menu().
 */
function mailhandler_menu() {
  $items = array();
  $items['admin/content/mailhandler'] = array(
    'title' => 'Mailhandler Mailboxes',
    'description' => t('Manage mailboxes'),
    'page callback' => 'mailhandler_operations_view',
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/mailhandler/view'] = array(
    'title' => 'List',
    'description' => 'Manage mailboxes',
    'page callback' =>  'mailhandler_operations_view',
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/content/mailhandler/add'] = array(
    'title' => 'Add mailbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailhandler_add_edit_mailbox', NULL),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mailhandler.admin.inc',
  );
  $items['admin/content/mailhandler/clone/%'] = array(
    'title' => 'Add mailbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailhandler_add_edit_mailbox', 4, TRUE),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_CALLBACK,
    'file' => 'mailhandler.admin.inc',
  );
  $items['admin/content/mailhandler/retrieve/%mailhandler_mailbox'] = array(
    'title' => 'Retrieve',
    'page callback' => 'mailhandler_node_process_mailbox',
    // Cast variable as string so menu system does not mistake it for a path argument
    'page arguments' => array(4, 'ui', (string) variable_get('mailhandler_max_retrieval', 0)),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_CALLBACK,
    'file' => 'mailhandler.retrieve.inc',
  );
  $items['admin/content/mailhandler/delete/%'] = array(
    'title' => 'Delete mailbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailhandler_admin_delete_confirm', 4),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_CALLBACK,
    'file' => 'mailhandler.admin.inc',
  );
  $items['admin/content/mailhandler/%/%mailhandler_mailboxes'] = array(
    'title' => 'Mailhandler',
    'title callback' => 'mailhandler_operations_title',
    'title arguments' => array(3, 4),
    'description' => 'Perform mailhandler operations',
    'page callback' =>  'mailhandler_operations',
    'page arguments' => array(3,4),
    //'load arguments' => array(array('name' => 4), 'names'),
    'access arguments' => array('administer mailhandler'),
    'type' => MENU_CALLBACK,
    'file' => 'mailhandler.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_help().
 */
function mailhandler_help($path = 'admin/help#mailhandler', $arg) {
  ; // TODO: Update help text.
}

/**
 * Implementation of hook_mail().
 */
function mailhandler_mail($key, &$message, $params) {
  $variables = array(
    '!body' => $params['body'],
    '!from' => $params['from'],
    '!site_name' => variable_get('site_name', 'Drupal'),
    '!subject' => $params['header']->subject,
    '!type' => $params['node']->type,
  );
  $message['subject'] = t('Email submission to !site_name failed - !subject', $variables);
  $message['body'][] = $params['error_text'];
  foreach ($params['error_messages'] as $key => $error) {
    $message['body'][$key] = decode_entities(strip_tags($error));
  }
  $message['body'][] = t("You sent:\n\nFrom: !from\nSubject: !subject\nBody:\n!body", $variables);
}

/**
 * Determine from address either using the mailbox setting or via the header information
 * 
 * @param $header
 *   Object message header information
 * @param $mailbox
 *   Array mailbox settings
 * @return array
 */
function mailhandler_get_fromaddress($header, $mailbox) {
  if (($fromheader = strtolower($mailbox['fromheader'])) && isset($header->$fromheader)) {
    $from = $header->$fromheader;
  }
  else {
    $from = $header->from;
  }
  return array($from[0]->mailbox .'@'. $from[0]->host, $from[0]->personal);
}

/**
 * Retrieve user information from his email address.
 */
function mailhandler_user_load($mail, $pass, $mailbox) {
  if ($mailbox['security'] == 1) {
    if (!$account = user_load(array('mail' => $mail, 'pass' => $pass))) {
      watchdog('mailhandler', 'Wrong password used in message commands for %address', array('%address' => $mail), WATCHDOG_NOTICE);
    }
    return $account;
  }
  else {
    return user_load(array('mail' => $mail));
  }
}

/**
 * Look up a user based on their mailalias addresses
 * 
 * Helper function for mailhandler_authenticate_tokenauth()
 * 
 * @param $fromaddress
 *   String from address
 * @param $node
 *   Object node object
 * @param $mailbox
 *   Array of mailhandler mailbox configuration
 *   
 * @return Object user object or FALSE
 */
function mailhandler_user_load_alias($fromaddress, $node, $mailbox) {
  $result = db_query("SELECT mail FROM {users} WHERE data LIKE '%%%s%%'", $fromaddress);
  while ($alias = db_result($result)) {
    if ($from_user = mailhandler_user_load($alias, $node->pass, $mailbox)) {
      return $from_user;
      break;
    }
  }
  return FALSE;
}

/**
* Export mailhandler mapping and display it in a form.
*/
function mailhandler_mailbox_export(&$form_state, $name) {
  $obj = mailhandler_mailboxes_load($name);
  drupal_set_title(check_plain($obj->description));
  $code = mailhandler_mailbox_export_export($obj);
  $lines = substr_count($code, "\n");

  // TODO: title callback is not setting the title.
  drupal_set_title(t('Export mailbox !mailbox', array('!mailbox' => $name)));
  $form['export'] = array(
    '#title' => t('Export data'),
    '#type' => 'textarea',
    '#value' => $code,
    '#rows' => $lines,
    '#description' => t(''),
  );
  return $form;
}

/**
 * Export a mailbox 
 */
function mailhandler_mailbox_export_export($obj, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('mailhandler', $obj, $indent);
  return $output;
}

/**
 * Implementation of hook_ctools_plugin_api()
 */
function mailhandler_ctools_plugin_api($module, $api) {
  if ($module == 'mailhandler' && $api == 'mailhandler_default') {
    return array(
      'version' => 1,
      'file' => 'mailhandler.mailhandler_default.inc',
      'path' => drupal_get_path('module', 'mailhandler'),
    );
  }
  elseif ($module == 'mailhandler' && $api == 'mailbox') {
    return array(
      'version' => 1
    );
  }
  elseif ($module == 'mailhandler' && $api == 'authenticate') {
    return array(
      'version' => 1
    );
  }
  elseif ($module == 'mailhandler' && $api == 'commands') {
    return array(
      'version' => 1
    );
  }
}

/**
 * Implementation of hook_theme()
 */
function mailhandler_theme() {
  $hooks = array();
  $hooks['mailhandler_operations_view'] = array(
    'arguments' => array(),
  );
  $hooks['mailhandler_view_mapping_formatter'] = array(
    'arguments' => array(),
  );
  return $hooks;
}

function theme_mailhandler_operations_view($maps) {
  // Theme these into a table with EDIT | DELETE | ACTIVATE | EXPORT
  $header = array(t('Name'), t('Status'), t('Operations'));
  $rows = array();
  if (!empty($maps)) {
    foreach ($maps as $map) {
      $rows[] = array(
      l($map->mail, "admin/settings/mailhandler/edit/$map->mail"),
      t($map->type),
      mailhandler_operations_view_options($map),
      );
    }
  }
  return theme('table', $header, $rows);
}

function mailhandler_operations_view_options($mailbox) {
  $ops = array();
  $ops['edit'] = array(
    'name' => t('Edit'),
    'path' => "admin/content/mailhandler/edit/$mailbox->mail",
  );
  $ops['delete'] = array(
    'name' => t('Delete'),
    'path' => "admin/content/mailhandler/delete/$mailbox->mail"
  );
  $mailbox->mail == $active ? $status = t('Disable') : $status = t('Enable');
  $ops['toggle'] = array(
    'name' => $status,
    'path' => "admin/content/mailhandler/toggle/$mailbox->mail"
  );
  $ops['export'] = array(
    'name' => t('Export'),
    'path' => "admin/content/mailhandler/export/$mailbox->mail"
  );
  $links = array();
  foreach ($ops as $op) {
    $links[] = l($op['name'], $op['path']);
  }
  $links = implode(" | ", $links);
  return $links;
}


function mailhandler_mailboxes_load($name = '', $new = FALSE) {
  $args = array(); $type = '';
  !$name ? $type = 'all' : $type = 'names'; 
  if ($type == 'names') {
    $args = array('name' => $name);
  }
  if (module_exists('ctools')) {
    ctools_include('export');
    $mailboxes = ctools_export_load_object('mailhandler', $type, $args);
    // If just fetching one mapping, queue it up.
    if ($type == 'names' && count($args['name']) == 1) {
      return array_shift($mailboxes);
    }
    elseif (!empty($mailboxes) && !$new) {
      return $mailboxes;
    }
    elseif ($new) {
      // Build a new mailbox
      if ($class = mailhandler_plugin_load_class('MailhandlerMailbox', 'mailbox', 'handler')) {
        return $class;
      } // TODO: handle case if not loaded.
    }
  }
}


function mailhandler_operations_title($op = '', $mailbox = '') {
  //$map = array_shift($map); // TODO: is this always going to be an object, and not an array?
  switch($op) {
    case 'edit':
      return t('Edit mailbox !mailbox', array('!mailbox' => $mailbox->mail));
    default:
      return;
      break;
  }
}

function mailhandler_operations($op = '', $mailbox = '') {
  switch($op) {
    case 'edit':
      return drupal_get_form('mailhandler_add_edit_mailbox', $mailbox->mail);
      break;
    case 'delete':
      return drupal_get_form('mailhandler_operations_delete_confirm', $mailbox);
      break;
    case 'toggle':
      return drupal_get_form('mailhandler_operations_toggle_confirm', $mailbox);
      break;
    case 'export':
      return drupal_get_form('mailhandler_mailbox_export', $mailbox->mail);
    default:
      return mailhandler_operations_view();
  }
}

function mailhandler_operations_view() {
  return theme('mailhandler_operations_view', mailhandler_mailboxes_load());
}


/**
 * Implementation of hook_mailhandler_mailbox().
 */
function mailhandler_mailhandler_mailbox() {
  $plugins = array();
  $plugins['MailhandlerMailbox'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'mailhandler') .'/plugins',
      'file' => 'MailhandlerMailbox.inc',
      'class' => 'MailhandlerMailbox',
      # 'parent' => '',
    ),
  );
  return $plugins;
}

// TODO: make abstract classes for these plugin types
function mailhandler_mailhandler_authenticate() {
  $plugins = array();
  $plugins['MailhandlerAuthenticateDefault'] = array(
    'name' => 'Mailhandler default authentication',
    'description' => 'Authenticate messages based on "from" email address',
    'handler' => array(
      'path' => drupal_get_path('module', 'mailhandler') .'/plugins',
      'file' => 'MailhandlerAuthenticateDefault.inc',
      'class' => 'MailhandlerAuthenticateDefault',
      # 'parent' => '',
    ),
  );
  $plugins['MailhandlerAuthenticateTokenauth'] = array(
    'name' => 'Mailhandler Tokenauth authentication',
    'description' => 'Authenticate messages based on tokens from Tokenauth',
    'handler' => array(
      'path' => drupal_get_path('module', 'mailhandler') .'/plugins',
      'file' => 'MailhandlerAuthenticateTokenauth.inc',
      'class' => 'MailhandlerAuthenticateTokenauth',
      # 'parent' => '',
    ),
  );
  return $plugins;
}

function mailhandler_mailhandler_commands() {
  $plugins = array();
  $plugins['MailhandlerCommandsDefault'] = array(
    'name' => 'Mailhandler default commands',
    'description' => 'Default Mailhandler command parser and processor',
    'handler' => array(
      'path' => drupal_get_path('module', 'mailhandler') .'/plugins',
      'file' => 'MailhandlerCommandsDefault.inc',
      'class' => 'MailhandlerCommandsDefault',
      # 'parent' => '',
    ),
  );
  return $plugins;
}

/**
* Implementation of hook_feeds_plugins().
*/
function mailhandler_feeds_plugins() {
  $info = array();
  $info['MailhandlerParser'] = array(
    'name' => 'Mailhandler parser',
    'description' => 'Parses an IMAP stream.',
    'handler' => array(
      'parent' => 'FeedsParser', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
      'class' => 'MailhandlerParser',
      'file' => 'MailhandlerParser.inc',
      'path' => drupal_get_path('module', 'mailhandler') . '/plugins',
    ),
  );
  $info['MailhandlerFetcher'] = array(
    'name' => 'Mailhandler fetcher',
    'description' => 'Connects to an IMAP/POP mailbox.',
    'handler' => array(
      'parent' => 'FeedsFetcher', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
      'class' => 'MailhandlerFetcher',
      'file' => 'MailhandlerFetcher.inc',
      'path' => drupal_get_path('module', 'mailhandler') . '/plugins',
    ),
  );
  $info['MailhandlerNodeProcessor'] = array(
    'name' => 'Mailhandler Node Processor',
    'description' => 'Create nodes from an IMAP/POP result set.',
    'handler' => array(
      'parent' => 'FeedsProcessor', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
      'class' => 'MailhandlerNodeProcessor',
      'file' => 'MailhandlerNodeProcessor.inc',
      'path' => drupal_get_path('module', 'mailhandler') . '/plugins',
    ),
  );
  return $info;
}

/*
 * Wrapper to load any class type
 */
function mailhandler_plugin_load_class($plugin, $type, $id, $args = NULL) {
  ctools_include('plugins');
  if ($class = ctools_plugin_load_class('mailhandler', $type, $plugin, 'handler')) {
    return new $class($args);
  }
  // TODO: handle case where plugin is unable to load.
}

